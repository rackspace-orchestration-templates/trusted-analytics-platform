# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

heat_template_version: 2014-10-16

description: |
  #### Basic Trusted Analytics Platform

  Trusted Analytics Platform (TAP) is open source software, optimized for performance and
  security, that accelerates the creation of Cloud-native applications driven by Big Data
  Analytics.  TAP makes it easier for developers and data scientists, at enterprises,
  CSPs and SIs, to collaborate by providing a shared, flexible environment for advanced
  analytics in public and private Clouds.  Data scientists get extensible tools, scalable
  algorithms and powerful engines to train and deploy predictive models.  Developers get
  consistent APIs, services and runtimes to quickly integrate these models into
  applications.  System Operators get an integrated stack that they can easily provision
  in a Cloud infrastructure.
  
  This deployment is intended for simple usages and getting familiar with the platform.
  It is not  designed for production grade usages.

parameter_groups:

- label: Hadoop Server Settings
  parameters:
    - cloudera_flavor
    - cloudera_size

- label: Applications Server Settings
  parameters:
    - cloudfoundry_flavor
    - cloudfoundry_size

- label: rax-dev-params
  parameters:
    - one_click_deployment_master
    - cloudera_server_hostname
    - cloudera_image
    - cloudfoundry_server_hostname
    - cloudfoundry_image

parameters:

  one_click_deployment_master:
    type: string
    default: http://7e7000e05ef44b6f3590-2fb85f6e16e295a101271ec4e0647db0.r80.cf5.rackcdn.com/one-click-deployment-master.zip

  cloudera_server_hostname:
    type: string
    default: Hadoop

  cloudera_flavor:
    label: Server Size
    type: string
    default: 30 GB I/O v1
    description: Server size for the Hadoop server
    constraints:
      - allowed_values:
        - 30 GB Compute v1
        - 60 GB Compute v1
        - 30 GB Memory v1
        - 60 GB Memory v1
        - 120 GB Memory v1
        - 240 GB Memory v1
        - 30 GB I/O v1
        - 60 GB I/O v1
        - 90 GB I/O v1
        - 120 GB I/O v1

  cloudera_image:
    type: string
    default: CentOS 6 (PVHVM)

  cloudera_size:
    label: Volume Size
    type: number
    default: 150
    description: Disk size for the Hadoop server
    constraints:
      - range: { min: 150, max: 3072 }

  cloudfoundry_server_hostname:
    type: string
    default: Applications

  cloudfoundry_flavor:
    label: Server Size
    type: string
    default: 60 GB Memory v1
    description: Server size for the Applications server
    constraints:
      - allowed_values:
        - 60 GB Compute v1
        - 60 GB Memory v1
        - 120 GB Memory v1
        - 240 GB Memory v1
        - 60 GB I/O v1
        - 90 GB I/O v1
        - 120 GB I/O v1

  cloudfoundry_image:
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)

  cloudfoundry_size:
    label: Volume Size
    type: number
    default: 150
    description: Disk size for the Applications server
    constraints:
      - range: { min: 150, max: 3072 }

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

  password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  cloudera_wait_condition:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: cloudera_wait_condition_handle }
      timeout: 7200

  cloudera_wait_condition_handle:
    type: OS::Heat::SwiftSignalHandle

  cloudera_server:
    type: "OS::Nova::Server"
    properties:
      key_name: { get_resource: ssh_key }
      flavor: { get_param: cloudera_flavor }
      name: { get_param: cloudera_server_hostname }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            package_update: true
            package_upgrade: true
            packages:
              - unzip
              - ansible
            write_files:
              - path: /etc/ansible/hosts
                content: |
                  [consul]
                  hadoop ansible_connection=local

                  [cloudera-manager]
                  hadoop ansible_connection=local

                  [cloudera-master]
                  hadoop ansible_connection=local

                  [cloudera-worker]
                  hadoop ansible_connection=local
              - path: /etc/sudoers.d/root
                permissions: '0440'
                content: |
                  Defaults:root !requiretty
              - path: /tmp/cloudera.sh
                permissions: '0544'
                content: |
                  #!/bin/bash

                  function senderr {
                      wc_notify --data-binary '{"status": "FAILURE", "reason": "'"$1"'", "data": "'"$2"'"}'
                      exit 1
                  }

                  wget -O one-click-deployment-master.zip %one_click_deployment_master%
                  if [ "$?" -ne 0 ]; then
                     senderr "Error downloading deployment master archive."
                  fi
                  unzip one-click-deployment-master.zip
                  if [ "$?" -ne 0 ]; then
                     senderr "Error extracting deployment master archive."
                  fi
                  cd one-click-deployment-master/ansible/
                  ansible-playbook -v --limit $HOSTNAME --sudo ${HOSTNAME}.yml
                  if [ "$?" -ne 0 ]; then
                     senderr "Error configuring server"
                  fi
                  wc_notify --data-binary '{"status": "SUCCESS"}'
            runcmd:
              - /tmp/cloudera.sh
          params:
            "%one_click_deployment_master%": { get_param: one_click_deployment_master }
            wc_notify: { get_attr: ['cloudera_wait_condition_handle', 'curl_cli'] }
      block_device_mapping:
        - volume_id: { get_resource: cloudera_volume }
          device_name: vda
          delete_on_termination: true
      networks:
      - uuid: "00000000-0000-0000-0000-000000000000"
      - uuid: "11111111-1111-1111-1111-111111111111"

  cloudera_volume:
    type: "OS::Cinder::Volume"
    properties:
      name:
        str_replace:
          template: "System disk for %cloudera_server_hostname%"
          params:
            "%cloudera_server_hostname%": { get_param: cloudera_server_hostname }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      size: { get_param: cloudera_size }
      image: { get_param: cloudera_image }
      volume_type: SSD

  cloudfoundry_wait_condition:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: cloudfoundry_wait_condition_handle }
      timeout: 7200

  cloudfoundry_wait_condition_handle:
    type: OS::Heat::SwiftSignalHandle

  cloudfoundry_server:
    type: "OS::Nova::Server"
    properties:
      key_name: { get_resource: ssh_key }
      flavor: { get_param: cloudfoundry_flavor }
      name: { get_param: cloudfoundry_server_hostname }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            package_update: true
            package_upgrade: true
            apt_sources:
              - source: "ppa:ansible/ansible"
            packages:
              - unzip
              - ansible
            write_files:
              - path: /etc/ansible/hosts
                content: |
                  [consul]
                  hadoop ansible_ssh_host=%cloudera_server_ip%

                  [cloudera-manager]
                  hadoop ansible_ssh_host=%cloudera_server_ip%

                  [cloudera-master]
                  hadoop ansible_ssh_host=%cloudera_server_ip%

                  [cloudera-worker]
                  hadoop ansible_ssh_host=%cloudera_server_ip%

                  [bosh-lite]
                  applications ansible_connection=local
              - path: /etc/sudoers.d/root
                permissions: '0440'
                content: |
                  Defaults:root	!requiretty
              - path: /tmp/cloudfoundry.sh
                permissions: '0544'
                content: |
                  #!/bin/bash
                  
                  function senderr {
                      wc_notify --data-binary '{"status": "FAILURE", "reason": "'"$1"'", "data": "'"$2"'"}'
                      exit 1
                  }

                  wget -O one-click-deployment-master.zip %one_click_deployment_master%
                  if [ "$?" -ne 0 ]; then
                     senderr "Error downloading deployment master archive."
                  fi
                  unzip one-click-deployment-master.zip
                  if [ "$?" -ne 0 ]; then
                     senderr "Error extracting deployment master archive."
                  fi
                  cd one-click-deployment-master/ansible/
                  ansible-playbook -v --extra-vars "cf_admin_password=%password%" --limit $HOSTNAME --sudo ${HOSTNAME}.yml
                  if [ "$?" -ne 0 ]; then
                     senderr "Error configuring server"
                  fi
                  wc_notify --data-binary '{"status": "SUCCESS"}'
            runcmd:
              - /tmp/cloudfoundry.sh
          params:
            "%cloudera_server_ip%": { get_attr: [ cloudera_server, accessIPv4 ] }
            "%cloudera_server_ip%": { get_attr: [ cloudera_server, accessIPv4 ] }
            "%one_click_deployment_master%": { get_param: one_click_deployment_master }
            "%password%": { get_attr: [ password, value ] }
            wc_notify: { get_attr: ['cloudfoundry_wait_condition_handle', 'curl_cli'] }
      block_device_mapping:
        - volume_id: { get_resource: cloudfoundry_volume }
          device_name: vda
          delete_on_termination: true
      networks:
      - uuid: "00000000-0000-0000-0000-000000000000"
      - uuid: "11111111-1111-1111-1111-111111111111"

  cloudfoundry_volume:
    type: "OS::Cinder::Volume"
    properties:
      name:
        str_replace:
          template: "System disk for %cloudfoundry_server_hostname%"
          params:
            "%cloudfoundry_server_hostname%": { get_param: cloudfoundry_server_hostname }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      size: { get_param: cloudfoundry_size }
      image: { get_param: cloudfoundry_image }
      volume_type: SSD

outputs:

  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }

  hadoop_server_ip:
    description: IP address of the Hadoop server
    value: { get_attr: [ cloudera_server, accessIPv4 ] }

  application_server_ip:
    description: IP address of the Application server
    value: { get_attr: [ cloudfoundry_server, accessIPv4 ] }

  console:
    value:
      str_replace:
        template: "https://console.%cloudfoundry_server_ip%.xip.io"
        params:
          "%cloudfoundry_server_ip%": { get_attr: [ cloudfoundry_server, accessIPv4 ] }
    description: Trusted Analytics Console

  cf_api_endpoint:
    value:
      str_replace:
        template: "https://api.%cloudfoundry_server_ip%.xip.io"
        params:
          "%cloudfoundry_server_ip%": { get_attr: [ cloudfoundry_server, accessIPv4 ] }
    description: Cloud Foundry API Endpoint

  username:
    value: "admin"
    description: Username

  password:
    value: { get_attr: [ password, value ] }
    description: Password
